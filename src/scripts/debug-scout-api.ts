import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function debugScoutAPI() {
  console.log('üîç DEBUG: Scout API Issues')
  console.log('=' .repeat(50))

  try {
    // 1. Verificar scouts en la base de datos
    console.log('\nüìä 1. Scouts en la base de datos:')
    const scouts = await prisma.scout.findMany({
      select: {
        id_scout: true,
        scout_name: true,
        name: true,
        surname: true
      }
    })

    console.log(`   Total scouts: ${scouts.length}`)
    scouts.forEach((scout, index) => {
      console.log(`   ${index + 1}. ID: ${scout.id_scout} | Nombre: ${scout.scout_name || scout.name}`)
    })

    if (scouts.length === 0) {
      console.log('   ‚ùå No hay scouts en la base de datos!')
      return
    }

    // 2. Probar API con scout existente
    console.log('\nüîå 2. Probando API con scout existente:')
    const firstScout = scouts[0]
    console.log(`   Probando con scout: ${firstScout.id_scout}`)

    try {
      const response = await fetch(`http://localhost:3000/api/scouts/${firstScout.id_scout}`)
      console.log(`   Status: ${response.status} ${response.statusText}`)
      
      if (response.ok) {
        const data = await response.json()
        console.log(`   ‚úÖ API funciona correctamente`)
        console.log(`   Scout obtenido: ${data.scout?.scout_name || data.scout?.name}`)
      } else {
        const errorData = await response.text()
        console.log(`   ‚ùå Error en API: ${errorData}`)
      }
    } catch (fetchError) {
      console.log(`   ‚ùå Error de conexi√≥n: ${fetchError}`)
      console.log('   üí° Aseg√∫rate de que el servidor est√© corriendo en localhost:3000')
    }

    // 3. Probar API con scout inexistente
    console.log('\nüîå 3. Probando API con scout inexistente:')
    try {
      const response = await fetch(`http://localhost:3000/api/scouts/scout-inexistente`)
      console.log(`   Status: ${response.status} ${response.statusText}`)
      
      if (response.status === 404) {
        console.log(`   ‚úÖ API maneja correctamente scouts inexistentes`)
      } else {
        const errorData = await response.text()
        console.log(`   ‚ö†Ô∏è  Respuesta inesperada: ${errorData}`)
      }
    } catch (fetchError) {
      console.log(`   ‚ùå Error de conexi√≥n: ${fetchError}`)
    }

    // 4. Verificar tipos de Scout
    console.log('\nüìù 4. Verificando estructura de datos:')
    const sampleScout = await prisma.scout.findFirst()
    if (sampleScout) {
      console.log('   Campos disponibles en Scout:')
      console.log(`   - id_scout: ${sampleScout.id_scout}`)
      console.log(`   - scout_name: ${sampleScout.scout_name}`)
      console.log(`   - name: ${sampleScout.name}`)
      console.log(`   - surname: ${sampleScout.surname}`)
      console.log(`   - nationality: ${sampleScout.nationality}`)
      console.log(`   - scout_level: ${sampleScout.scout_level}`)
    }

    console.log('\nüí° POSIBLES CAUSAS DEL ERROR 404:')
    console.log('   1. El scoutId que se est√° pasando no existe en la BD')
    console.log('   2. El servidor no est√° corriendo en localhost:3000')
    console.log('   3. Hay un problema de routing en Next.js')
    console.log('   4. El componente est√° pasando un ID incorrecto')

    console.log('\nüîß SOLUCIONES SUGERIDAS:')
    console.log('   1. Verificar qu√© scoutId se est√° pasando al componente')
    console.log('   2. Usar uno de los IDs v√°lidos listados arriba')
    console.log('   3. Agregar logs en el hook useScoutProfile')
    console.log('   4. Verificar que el servidor est√© corriendo')

  } catch (error) {
    console.error('‚ùå Error en debug:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  debugScoutAPI()
}

export { debugScoutAPI }