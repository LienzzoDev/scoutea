import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixScoutRoutes() {
  console.log('üîß FIXING SCOUT ROUTES')
  console.log('=' .repeat(50))

  try {
    // 1. Obtener todos los scouts v√°lidos
    console.log('\nüìä 1. Scouts v√°lidos en la base de datos:')
    const scouts = await prisma.scout.findMany({
      select: {
        id_scout: true,
        scout_name: true,
        name: true,
        surname: true,
        scout_level: true,
        nationality: true
      },
      orderBy: {
        scout_name: 'asc'
      }
    })

    console.log(`   Total: ${scouts.length} scouts`)
    scouts.forEach((scout, index) => {
      const displayName = scout.scout_name || `${scout.name} ${scout.surname}`.trim()
      console.log(`   ${index + 1}. ${displayName}`)
      console.log(`      ID: ${scout.id_scout}`)
      console.log(`      URL: /member/scout/${scout.id_scout}`)
      console.log(`      Level: ${scout.scout_level || 'N/A'}`)
      console.log(`      Nationality: ${scout.nationality || 'N/A'}`)
      console.log('')
    })

    // 2. Generar URLs de prueba
    console.log('\nüîó 2. URLs de prueba v√°lidas:')
    scouts.slice(0, 3).forEach((scout, index) => {
      const displayName = scout.scout_name || `${scout.name} ${scout.surname}`.trim()
      console.log(`   ${index + 1}. ${displayName}:`)
      console.log(`      http://localhost:3000/member/scout/${scout.id_scout}`)
    })

    // 3. Verificar si hay scouts con IDs problem√°ticos
    console.log('\nüîç 3. Verificando IDs problem√°ticos:')
    const problematicIds = scouts.filter(scout => 
      scout.id_scout.includes(' ') || 
      scout.id_scout.includes('/') || 
      scout.id_scout.includes('?') ||
      scout.id_scout.length < 3
    )

    if (problematicIds.length > 0) {
      console.log(`   ‚ö†Ô∏è  Encontrados ${problematicIds.length} IDs problem√°ticos:`)
      problematicIds.forEach(scout => {
        console.log(`      - "${scout.id_scout}" (${scout.scout_name})`)
      })
    } else {
      console.log('   ‚úÖ Todos los IDs son v√°lidos para URLs')
    }

    // 4. Crear datos de prueba adicionales si es necesario
    console.log('\nüìù 4. Recomendaciones:')
    
    if (scouts.length < 5) {
      console.log('   üí° Tienes pocos scouts para pruebas. Considera ejecutar:')
      console.log('      npx tsx src/scripts/create-sample-scouts.ts')
    }

    console.log('\n‚úÖ SOLUCIONES IMPLEMENTADAS:')
    console.log('   1. ‚úÖ Mejorado manejo de errores en useScoutProfile')
    console.log('   2. ‚úÖ Agregados logs detallados para debugging')
    console.log('   3. ‚úÖ Creado componente ScoutNotFound')
    console.log('   4. ‚úÖ Agregado toast de error informativo')

    console.log('\nüéØ PR√ìXIMOS PASOS:')
    console.log('   1. Usar uno de los IDs v√°lidos listados arriba')
    console.log('   2. Verificar que el componente reciba el scoutId correcto')
    console.log('   3. Revisar los logs en la consola del navegador')
    console.log('   4. Si el problema persiste, verificar el routing de Next.js')

    // 5. Probar APIs
    console.log('\nüß™ 5. Probando APIs r√°pidamente:')
    const testScout = scouts[0]
    if (testScout) {
      try {
        const response = await fetch(`http://localhost:3000/api/scouts/${testScout.id_scout}`)
        if (response.ok) {
          console.log(`   ‚úÖ API funciona: /api/scouts/${testScout.id_scout}`)
        } else {
          console.log(`   ‚ùå API error: ${response.status} ${response.statusText}`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  No se pudo probar API (servidor no corriendo?)`)
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  fixScoutRoutes()
}

export { fixScoutRoutes }