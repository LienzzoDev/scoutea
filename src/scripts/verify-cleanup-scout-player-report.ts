#!/usr/bin/env tsx

import { prisma } from "@/lib/db";

async function verifyCleanup() {
  console.log("üîç VERIFICACI√ìN: Limpieza de ScoutPlayerReport\n");
  console.log("=".repeat(60));

  let allChecksPassed = true;

  // ‚úÖ CHECK 1: Verificar que el modelo ya no existe en Prisma Client
  console.log("\n‚úÖ CHECK 1: Modelo ScoutPlayerReport eliminado del schema");
  try {
    // @ts-expect-error - Esperamos que esto falle porque el modelo ya no existe
    const testAccess = typeof prisma.scoutPlayerReport === 'undefined';
    if (testAccess) {
      console.log("   ‚úÖ CORRECTO: Modelo ScoutPlayerReport ya no existe en Prisma Client");
    } else {
      console.log("   ‚ùå ERROR: Modelo ScoutPlayerReport todav√≠a existe");
      allChecksPassed = false;
    }
  } catch (error) {
    console.log("   ‚úÖ CORRECTO: Modelo ScoutPlayerReport no es accesible");
  }

  // ‚úÖ CHECK 2: Verificar que la tabla fue eliminada de la BD
  console.log("\n‚úÖ CHECK 2: Tabla scout_player_reports eliminada de la BD");
  try {
    const result = await prisma.$queryRaw<Array<{ exists: boolean }>>`
      SELECT EXISTS (
        SELECT FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'scout_player_reports'
      ) as exists;
    `;

    if (!result[0].exists) {
      console.log("   ‚úÖ CORRECTO: Tabla scout_player_reports NO existe en la BD");
    } else {
      console.log("   ‚ùå ERROR: Tabla scout_player_reports todav√≠a existe en la BD");
      allChecksPassed = false;
    }
  } catch (error) {
    console.log("   ‚ö†Ô∏è No se pudo verificar la existencia de la tabla");
  }

  // ‚úÖ CHECK 3: Verificar que los reportes siguen funcionando
  console.log("\n‚úÖ CHECK 3: Query de reportes con relaciones funciona correctamente");
  try {
    const reportCount = await prisma.reporte.count();
    console.log(`   üìä Total de reportes en la BD: ${reportCount}`);

    const reportsWithRelations = await prisma.reporte.findMany({
      take: 5,
      include: {
        scout: {
          select: {
            scout_name: true,
            email: true,
          },
        },
        player: {
          select: {
            player_name: true,
            complete_player_name: true,
          },
        },
      },
    });

    console.log(`   ‚úÖ CORRECTO: Query funcion√≥ correctamente`);
    console.log(`   üìã Muestra de ${reportsWithRelations.length} reportes con relaciones:`);

    reportsWithRelations.slice(0, 3).forEach((report, index) => {
      console.log(`      ${index + 1}. Scout: ${report.scout?.scout_name || 'N/A'} ‚Üí Player: ${report.player?.player_name || 'N/A'}`);
    });
  } catch (error) {
    console.log("   ‚ùå ERROR: Query de reportes fall√≥:", error);
    allChecksPassed = false;
  }

  // ‚úÖ CHECK 4: Verificar que las relaciones directas funcionan
  console.log("\n‚úÖ CHECK 4: Relaciones directas scout_id e id_player funcionan");
  try {
    const reportsWithDirectRelations = await prisma.reporte.findMany({
      where: {
        AND: [
          { scout_id: { not: null } },
          { id_player: { not: null } },
        ],
      },
      select: {
        id_report: true,
        scout_id: true,
        id_player: true,
      },
    });

    const totalReports = await prisma.reporte.count();
    const percentage = ((reportsWithDirectRelations.length / totalReports) * 100).toFixed(1);

    console.log(`   ‚úÖ CORRECTO: ${reportsWithDirectRelations.length}/${totalReports} reportes (${percentage}%) tienen relaciones directas`);
    console.log(`   üí° Las relaciones directas (scout_id, id_player) son suficientes`);
  } catch (error) {
    console.log("   ‚ùå ERROR: Verificaci√≥n de relaciones directas fall√≥:", error);
    allChecksPassed = false;
  }

  // ‚úÖ CHECK 5: Verificar que la API de reportes sigue funcionando
  console.log("\n‚úÖ CHECK 5: Estructura de datos para API correcta");
  try {
    const sampleReport = await prisma.reporte.findFirst({
      where: {
        AND: [
          { scout_id: { not: null } },
          { id_player: { not: null } },
        ],
      },
      include: {
        scout: {
          select: {
            id_scout: true,
            scout_name: true,
            email: true,
          },
        },
        player: {
          select: {
            id_player: true,
            player_name: true,
            url_trfm: true,
            url_instagram: true,
          },
        },
      },
    });

    if (sampleReport) {
      console.log("   ‚úÖ CORRECTO: Estructura completa de datos disponible");
      console.log(`   üìù Reporte ejemplo:`);
      console.log(`      - ID: ${sampleReport.id_report}`);
      console.log(`      - Scout: ${sampleReport.scout?.scout_name || 'N/A'}`);
      console.log(`      - Player: ${sampleReport.player?.player_name || 'N/A'}`);
      console.log(`      - Status: ${sampleReport.report_status || 'N/A'}`);
    } else {
      console.log("   ‚ö†Ô∏è No se encontr√≥ reporte con relaciones completas");
    }
  } catch (error) {
    console.log("   ‚ùå ERROR: Verificaci√≥n de estructura fall√≥:", error);
    allChecksPassed = false;
  }

  // ‚úÖ CHECK 6: Verificar que no hay referencias hu√©rfanas
  console.log("\n‚úÖ CHECK 6: No hay foreign keys hu√©rfanas");
  try {
    const result = await prisma.$queryRaw<Array<{ count: bigint }>>`
      SELECT COUNT(*) as count
      FROM information_schema.table_constraints
      WHERE constraint_type = 'FOREIGN KEY'
      AND constraint_name LIKE '%scout_player_reports%';
    `;

    const orphanedFKs = Number(result[0].count);

    if (orphanedFKs === 0) {
      console.log("   ‚úÖ CORRECTO: No hay foreign keys hu√©rfanas relacionadas con scout_player_reports");
    } else {
      console.log(`   ‚ö†Ô∏è Se encontraron ${orphanedFKs} foreign keys hu√©rfanas`);
    }
  } catch (error) {
    console.log("   ‚ö†Ô∏è No se pudo verificar foreign keys hu√©rfanas");
  }

  // RESUMEN FINAL
  console.log("\n" + "=".repeat(60));
  if (allChecksPassed) {
    console.log("\n‚úÖ ¬°LIMPIEZA COMPLETADA EXITOSAMENTE!");
    console.log("\nüìã Resumen:");
    console.log("   ‚Ä¢ Tabla scout_player_reports eliminada de la BD");
    console.log("   ‚Ä¢ Modelo ScoutPlayerReport removido del schema");
    console.log("   ‚Ä¢ Relaciones directas (scout_id, id_player) funcionan correctamente");
    console.log("   ‚Ä¢ API de reportes mantiene toda la funcionalidad");
    console.log("   ‚Ä¢ 0 referencias hu√©rfanas");
    console.log("\nüí° Justificaci√≥n:");
    console.log("   ScoutPlayerReport era una junction table redundante con solo 1/76 registros.");
    console.log("   Las relaciones directas en Reporte son suficientes y m√°s eficientes.\n");
  } else {
    console.log("\n‚ö†Ô∏è Algunas verificaciones fallaron. Revisar los checks arriba.\n");
  }

  await prisma.$disconnect();
}

verifyCleanup().catch((error) => {
  console.error("‚ùå Error durante la verificaci√≥n:", error);
  process.exit(1);
});
