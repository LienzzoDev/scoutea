// üõ°Ô∏è ESQUEMAS DE VALIDACI√ìN CON ZOD - ENHANCED SECURITY
// ‚úÖ PROP√ìSITO: Validar que los datos enviados sean correctos y seguros
// ‚úÖ BENEFICIO: Previene errores, ataques maliciosos y datos corruptos
// ‚úÖ RESULTADO: Mensajes de error m√°s claros, app m√°s segura
// üöÄ NUEVO: Validaci√≥n mejorada con sanitizaci√≥n y prevenci√≥n de inyecciones

import { z } from 'zod'

// üõ°Ô∏è ENHANCED SECURITY PATTERNS
const SECURITY_PATTERNS = {
  // SQL Injection patterns
  SQL_INJECTION: /(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\b)|(\b(OR|AND)\s+\d+\s*=\s*\d+)|('|(\\')|(;)|(--)|(\|)|(\*)|(%)|(\+)|(=))/i,
  
  // XSS patterns
  XSS_SCRIPT: /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
  XSS_IFRAME: /<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi,
  XSS_JAVASCRIPT: /javascript:/i,
  XSS_EVENTS: /on\w+\s*=/i,
  
  // Path traversal
  PATH_TRAVERSAL: /\.\.\//,
  
  // Command injection
  COMMAND_INJECTION: /[;&|`$(){}[\]]/,
  
  // NoSQL injection
  NOSQL_INJECTION: /\$where|\$ne|\$gt|\$lt|\$gte|\$lte|\$in|\$nin|\$regex/i
}

// üõ°Ô∏è SECURITY VALIDATION HELPER
const createSecureString = (minLength: number, maxLength: number, pattern?: RegExp, errorMessage?: string) => {
  return z
    .string()
    .min(minLength, `Debe tener al menos ${minLength} caracteres`)
    .max(maxLength, `No puede exceder ${maxLength} caracteres`)
    .refine(
      (val) => !SECURITY_PATTERNS.SQL_INJECTION.test(val),
      'Contiene patrones de inyecci√≥n SQL no permitidos'
    )
    .refine(
      (val) => !SECURITY_PATTERNS.XSS_SCRIPT.test(val) && 
               !SECURITY_PATTERNS.XSS_IFRAME.test(val) && 
               !SECURITY_PATTERNS.XSS_JAVASCRIPT.test(val) && 
               !SECURITY_PATTERNS.XSS_EVENTS.test(val),
      'Contiene patrones XSS no permitidos'
    )
    .refine(
      (val) => !SECURITY_PATTERNS.PATH_TRAVERSAL.test(val),
      'Contiene patrones de path traversal no permitidos'
    )
    .refine(
      (val) => !SECURITY_PATTERNS.COMMAND_INJECTION.test(val),
      'Contiene caracteres de inyecci√≥n de comandos no permitidos'
    )
    .refine(
      (val) => !SECURITY_PATTERNS.NOSQL_INJECTION.test(val),
      'Contiene patrones de inyecci√≥n NoSQL no permitidos'
    )
    .refine(
      (val) => pattern ? pattern.test(val) : true,
      errorMessage || 'Formato no v√°lido'
    )
    .transform((val) => val.trim()) // Always trim whitespace
}

// üéØ ========== VALIDACIONES B√ÅSICAS REUTILIZABLES ==========

// üìù VALIDACI√ìN DE NOMBRE DE JUGADOR - ENHANCED SECURITY
const playerNameSchema = createSecureString(
  2, 
  100, 
  /^[a-zA-Z√Ä-√ø\u0100-\u017F\s\-'\.]+$/, 
  'El nombre solo puede contener letras, espacios, guiones y apostrofes'
)

// üéÇ VALIDACI√ìN DE EDAD
const ageSchema = z
  .number()
  .int('La edad debe ser un n√∫mero entero')
  .min(16, 'La edad m√≠nima es 16 a√±os')
  .max(50, 'La edad m√°xima es 50 a√±os')

// ‚≠ê VALIDACI√ìN DE RATING
const ratingSchema = z
  .number()
  .min(0, 'El rating m√≠nimo es 0')
  .max(100, 'El rating m√°ximo es 100')

// üìè VALIDACI√ìN DE ALTURA
const heightSchema = z
  .number()
  .int('La altura debe ser un n√∫mero entero')
  .min(150, 'La altura m√≠nima es 150 cm')
  .max(220, 'La altura m√°xima es 220 cm')

// ü¶∂ VALIDACI√ìN DE PIE DOMINANTE
const footSchema = z.enum(['Left', 'Right', 'Both'], {
  errorMap: () => ({ message: 'El pie debe ser Left, Right o Both' })
})

// üéØ VALIDACI√ìN DE POSICI√ìN - ENHANCED SECURITY
const positionSchema = createSecureString(
  1, 
  10, 
  /^[A-Z]{1,3}[A-Z\-]*$/, 
  'La posici√≥n debe usar c√≥digos v√°lidos (ej: CF, CM, CB)'
)

// üåç VALIDACI√ìN DE NACIONALIDAD - ENHANCED SECURITY
const nationalitySchema = createSecureString(
  2, 
  50, 
  /^[a-zA-Z√Ä-√ø\u0100-\u017F\s\-]+$/, 
  'La nacionalidad solo puede contener letras, espacios y guiones'
)

// ‚öΩ VALIDACI√ìN DE NOMBRE DE EQUIPO - ENHANCED SECURITY
const teamNameSchema = createSecureString(
  2, 
  100, 
  /^[a-zA-Z√Ä-√ø\u0100-\u017F0-9\s\-'\.&]+$/, 
  'El nombre del equipo solo puede contener letras, n√∫meros, espacios, guiones, apostrofes, puntos y &'
)

// üìÖ VALIDACI√ìN DE FECHA
const dateStringSchema = z
  .string()
  .regex(/^\d{4}-\d{2}-\d{2}$/, 'La fecha debe tener formato YYYY-MM-DD')
  .refine((date) => {
    const parsedDate = new Date(date)
    return !isNaN(parsedDate.getTime())
  }, 'La fecha debe ser v√°lida')

// üîó VALIDACI√ìN DE URL
const urlSchema = z
  .string()
  .url('Debe ser una URL v√°lida')
  .max(500, 'La URL no puede exceder 500 caracteres')

// üìß ========== ESQUEMAS PRINCIPALES ==========

/**
 * üìù ESQUEMA PARA CREAR NUEVO JUGADOR
 * 
 * ‚úÖ QU√â VALIDA: Todos los campos necesarios para crear un jugador
 * ‚úÖ POR QU√â: Asegurar que los datos m√≠nimos est√©n presentes y sean v√°lidos
 * ‚úÖ USO: En POST /api/players
 */
export const PlayerCreateSchema = z.object({
  // üÜî CAMPOS OBLIGATORIOS
  player_name: playerNameSchema,
  
  // üë§ INFORMACI√ìN PERSONAL (OPCIONAL)
  complete_player_name: z.string().max(150).optional(),
  date_of_birth: dateStringSchema.optional(),
  age: ageSchema.optional(),
  nationality_1: nationalitySchema.optional(),
  nationality_2: nationalitySchema.optional(),
  
  // üèÉ‚Äç‚ôÇÔ∏è ATRIBUTOS F√çSICOS (OPCIONAL)
  height: heightSchema.optional(),
  foot: footSchema.optional(),
  position_player: positionSchema.optional(),
  
  // ‚öΩ INFORMACI√ìN DE EQUIPO (OPCIONAL)
  team_name: teamNameSchema.optional(),
  team_country: z.string().max(100).optional(),
  team_competition: z.string().max(100).optional(),
  
  // üìä M√âTRICAS (OPCIONAL)
  player_rating: ratingSchema.optional(),
  player_elo: z.number().min(0).max(3000).optional(),
  player_ranking: z.number().int().min(1).optional(),
  
  // üìÑ CONTRATO (OPCIONAL)
  contract_end: dateStringSchema.optional(),
  on_loan: z.boolean().optional(),
  agency: z.string().max(100).optional(),
  
  // üîó ENLACES (OPCIONAL)
  url_trfm: urlSchema.optional(),
  url_instagram: urlSchema.optional(),
  video: urlSchema.optional()
}).strict() // No permitir campos adicionales

/**
 * ‚úèÔ∏è ESQUEMA PARA ACTUALIZAR JUGADOR EXISTENTE
 * 
 * ‚úÖ QU√â VALIDA: Campos que se pueden actualizar (todos opcionales)
 * ‚úÖ POR QU√â: Permitir actualizaciones parciales sin requerir todos los campos
 * ‚úÖ USO: En PUT /api/players/[id]
 */
export const PlayerUpdateSchema = PlayerCreateSchema.partial()

/**
 * üîç ESQUEMA PARA B√öSQUEDA Y FILTROS
 * 
 * ‚úÖ QU√â VALIDA: Par√°metros de b√∫squeda, paginaci√≥n y filtros
 * ‚úÖ POR QU√â: Prevenir consultas maliciosas y asegurar par√°metros v√°lidos
 * ‚úÖ USO: En GET /api/players
 */
export const PlayerSearchSchema = z.object({
  // üìÑ PAGINACI√ìN
  page: z
    .string()
    .regex(/^\d+$/, 'La p√°gina debe ser un n√∫mero')
    .transform(Number)
    .refine(n => n >= 1, 'La p√°gina debe ser mayor a 0')
    .default('1'),
    
  limit: z
    .string()
    .regex(/^\d+$/, 'El l√≠mite debe ser un n√∫mero')
    .transform(Number)
    .refine(n => n >= 1 && n <= 100, 'El l√≠mite debe estar entre 1 y 100')
    .default('20'),
  
  // üìà ORDENAMIENTO
  sortBy: z
    .enum([
      'player_name', 
      'age', 
      'player_rating', 
      'createdAt', 
      'team_name',
      'position_player',
      'nationality_1'
    ])
    .default('player_name'),
    
  sortOrder: z
    .enum(['asc', 'desc'])
    .default('asc'),
  
  // üîç FILTROS (TODOS OPCIONALES)
  'filters[player_name]': z.string().min(1).max(100).optional(),
  'filters[position_player]': positionSchema.optional(),
  'filters[team_name]': z.string().min(1).max(100).optional(),
  'filters[nationality_1]': nationalitySchema.optional(),
  'filters[min_age]': z.string().regex(/^\d+$/).transform(Number).refine(n => n >= 16 && n <= 50).optional(),
  'filters[max_age]': z.string().regex(/^\d+$/).transform(Number).refine(n => n >= 16 && n <= 50).optional(),
  'filters[min_rating]': z.string().regex(/^\d+(\.\d+)?$/).transform(Number).refine(n => n >= 0 && n <= 100).optional(),
  'filters[max_rating]': z.string().regex(/^\d+(\.\d+)?$/).transform(Number).refine(n => n >= 0 && n <= 100).optional(),
  'filters[on_loan]': z.enum(['true', 'false']).transform(val => val === 'true').optional()
}).strict()

/**
 * üÜî ESQUEMA PARA VALIDAR ID DE JUGADOR
 * 
 * ‚úÖ QU√â VALIDA: Que el ID tenga formato v√°lido
 * ‚úÖ POR QU√â: Prevenir inyecciones y asegurar formato correcto
 * ‚úÖ USO: En rutas con par√°metro [id]
 */
export const PlayerIdSchema = z.object({
  id: z
    .string()
    .min(1, 'El ID no puede estar vac√≠o')
    .max(50, 'El ID no puede exceder 50 caracteres')
    .regex(/^[a-zA-Z0-9_-]+$/, 'El ID solo puede contener letras, n√∫meros, guiones y guiones bajos')
})

// üîß ========== ESQUEMAS DE UTILIDAD ==========

/**
 * üìä ESQUEMA PARA VALIDAR PAR√ÅMETROS DE ESTAD√çSTICAS
 * 
 * ‚úÖ QU√â VALIDA: Filtros opcionales para estad√≠sticas
 * ‚úÖ USO: En GET /api/players/stats
 */
export const PlayerStatsSchema = z.object({
  period: z.enum(['week', 'month', 'year', 'all']).default('all'),
  position: positionSchema.optional(),
  nationality: nationalitySchema.optional()
}).strict()

/**
 * üîß ESQUEMA PARA VALIDAR PAR√ÅMETROS DE FILTROS DISPONIBLES
 * 
 * ‚úÖ QU√â VALIDA: Opciones para obtener filtros disponibles
 * ‚úÖ USO: En GET /api/players/filters
 */
export const AvailableFiltersSchema = z.object({
  include_counts: z.enum(['true', 'false']).transform(val => val === 'true').default('true'),
  min_count: z.string().regex(/^\d+$/).transform(Number).default('1')
}).strict()

// üì§ ========== FUNCIONES DE VALIDACI√ìN ==========

/**
 * üõ°Ô∏è FUNCI√ìN PARA VALIDAR DATOS DE CREACI√ìN
 * 
 * ‚úÖ QU√â HACE: Valida y transforma datos para crear jugador
 * ‚úÖ RETORNA: Datos validados o lanza error con detalles
 */
export function validatePlayerCreate(data: unknown) {
  try {
    return PlayerCreateSchema.parse(data)
  } catch (error) {
    if (error instanceof z.ZodError) {
      // üìã FORMATEAR ERRORES DE VALIDACI√ìN
      const formattedErrors = error.errors.map(err => ({
        field: err.path.join('.'),
        message: err.message,
        received: err.input
      }))
      
      throw new Error(`Datos de creaci√≥n inv√°lidos: ${JSON.stringify(formattedErrors)}`)
    }
    throw error
  }
}

/**
 * üõ°Ô∏è FUNCI√ìN PARA VALIDAR DATOS DE ACTUALIZACI√ìN
 */
export function validatePlayerUpdate(data: unknown) {
  try {
    return PlayerUpdateSchema.parse(data)
  } catch (error) {
    if (error instanceof z.ZodError) {
      const formattedErrors = error.errors.map(err => ({
        field: err.path.join('.'),
        message: err.message,
        received: err.input
      }))
      
      throw new Error(`Datos de actualizaci√≥n inv√°lidos: ${JSON.stringify(formattedErrors)}`)
    }
    throw error
  }
}

/**
 * üõ°Ô∏è FUNCI√ìN PARA VALIDAR PAR√ÅMETROS DE B√öSQUEDA
 */
export function validatePlayerSearch(params: unknown) {
  try {
    return PlayerSearchSchema.parse(params)
  } catch (error) {
    if (error instanceof z.ZodError) {
      const formattedErrors = error.errors.map(err => ({
        field: err.path.join('.'),
        message: err.message,
        received: err.input
      }))
      
      throw new Error(`Par√°metros de b√∫squeda inv√°lidos: ${JSON.stringify(formattedErrors)}`)
    }
    throw error
  }
}

/**
 * üõ°Ô∏è FUNCI√ìN PARA VALIDAR ID DE JUGADOR
 */
export function validatePlayerId(id: unknown) {
  try {
    return PlayerIdSchema.parse({ id }).id
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new Error(`ID de jugador inv√°lido: ${error.errors[0]?.message}`)
    }
    throw error
  }
}

// üì§ EXPORTACIONES ADICIONALES (ya exportados arriba individualmente)

// üéØ TIPOS INFERIDOS DE LOS ESQUEMAS
export type ValidatedPlayerCreate = z.infer<typeof PlayerCreateSchema>
export type ValidatedPlayerUpdate = z.infer<typeof PlayerUpdateSchema>
export type ValidatedPlayerSearch = z.infer<typeof PlayerSearchSchema>
export type ValidatedPlayerId = z.infer<typeof PlayerIdSchema>

// üìù MENSAJES DE ERROR PERSONALIZADOS
export const ValidationErrors = {
  INVALID_PLAYER_NAME: 'El nombre del jugador no es v√°lido',
  INVALID_AGE: 'La edad debe estar entre 16 y 50 a√±os',
  INVALID_RATING: 'El rating debe estar entre 0 y 100',
  INVALID_POSITION: 'La posici√≥n debe usar c√≥digos v√°lidos',
  INVALID_DATE: 'La fecha debe tener formato YYYY-MM-DD',
  INVALID_URL: 'La URL no es v√°lida',
  INVALID_ID: 'El ID del jugador no es v√°lido'
} as const