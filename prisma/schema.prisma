generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id               String            @id @default(cuid())
  clerkId          String            @unique
  email            String            @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime?
  address          String?
  city             String?
  country          String?
  // Campos legacy (mantener por compatibilidad)
  nationality      String?
  location         String?
  bio              String?
  experience       Int?
  specialization   String?
  languages        String[]
  website          String?
  linkedin         String?
  twitter          String?
  profileCompleted Boolean           @default(false)
  subscription     Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  onDemandMessages     OnDemandMessage[]
  scoutContactMessages ScoutContactMessage[]
  playerLists          PlayerList[]
  scoutLists           ScoutList[]

  @@index([clerkId])
  @@index([email])
  @@index([profileCompleted])
  @@map("usuarios")
}

model Jugador {
  id_player                       String              @id @default(cuid())
  player_name                     String
  complete_player_name            String?
  date_of_birth                   DateTime?
  correct_date_of_birth           DateTime?
  age                             Int?
  age_value                       Float?
  age_value_percent               Float?
  age_coeff                       Float?
  wyscout_id_1                    String?
  wyscout_name_1                  String?
  wyscout_id_2                    String?
  wyscout_name_2                  String?
  id_fmi                          String?
  position_player                 String?
  correct_position_player         String?
  position_value                  Float?
  position_value_percent          Float?
  foot                            String?
  correct_foot                    String?
  height                          Float?
  correct_height                  Float?
  nationality_1                   String?
  correct_nationality_1           String?
  nationality_value               Float?
  nationality_value_percent       Float?
  nationality_2                   String?
  correct_nationality_2           String?
  national_tier                   String?
  rename_national_tier            String?
  correct_national_tier           String?
  pre_team                        String?
  team_name                       String?
  correct_team_name               String?
  team_country                    String?
  team_elo                        Float?
  team_level                      String?
  team_level_value                Float?
  team_level_value_percent        Float?
  team_competition                String?
  competition_country             String?
  team_competition_value          Float?
  team_competition_value_percent  Float?
  competition_tier                String?
  competition_confederation       String?
  competition_elo                 Float?
  competition_level               String?
  competition_level_value         Float?
  competition_level_value_percent Float?
  owner_club                      String?
  owner_club_country              String?
  owner_club_value                Float?
  owner_club_value_percent        Float?
  pre_team_loan_from              String?
  team_loan_from                  String?
  correct_team_loan_from          String?
  on_loan                         Boolean?            @default(false)
  agency                          String?
  correct_agency                  String?
  contract_end                    DateTime?
  correct_contract_end            DateTime?
  player_rating                   Float?
  player_rating_norm              Float?
  player_trfm_value               Float?
  player_trfm_value_norm          Float?
  previous_trfm_value             Float?
  previous_trfm_value_date        DateTime?
  trfm_value_change_percent       Float?
  trfm_value_last_updated         DateTime?
  total_fmi_pts_norm              Float?
  player_elo                      Float?
  player_level                    String?
  player_ranking                  Int?
  community_potential             Float?
  stats_evo_3m                    Float?
  photo_coverage                  String?
  url_trfm                        String?
  url_trfm_advisor                String?
  url_secondary                   String?
  url_instagram                   String?
  video                           String?
  existing_club                   String?

  // NUEVAS FOREIGN KEYS NORMALIZADAS
  team_id                         String?
  position_id                     String?
  nationality_id                  String?
  agency_id                       String?

  // CAMPOS DE APROBACIÓN (para jugadores creados por scouts)
  approval_status                 String              @default("approved") // "pending", "approved", "rejected"
  created_by_scout_id             String?             // ID del scout que creó el jugador
  approved_by_admin_id            String?             // ID del admin que aprobó/rechazó
  approval_date                   DateTime?           // Fecha de aprobación/rechazo
  rejection_reason                String?             // Motivo de rechazo (opcional)

  createdAt                       DateTime            @default(now())
  updatedAt                       DateTime            @updatedAt
  
  // RELACIONES EXISTENTES
  atributos                       Atributos?
  beeswarmData                    BeeswarmData[]
  dataPopulationLogs              DataPopulationLog[]
  lollipopData                    LollipopData[]
  playerLists                     PlayerList[]
  playerStats3m                   PlayerStats3m?
  radarMetrics                    RadarMetrics[]
  reportes                        Reporte[]

  // NUEVAS RELACIONES NORMALIZADAS
  team                            Equipo?             @relation("PlayerTeam", fields: [team_id], references: [id_team])
  position                        Position?           @relation("PlayerPosition", fields: [position_id], references: [id])
  nationality                     Country?            @relation("PlayerNationality", fields: [nationality_id], references: [id])
  agencyRelation                  Agency?             @relation("PlayerAgency", fields: [agency_id], references: [id])
  corrections                     PlayerCorrection[]  @relation("PlayerCorrections")
  metrics                         PlayerMetric[]      @relation("PlayerMetrics")
  playerRoles                     PlayerRole[]        @relation("PlayerRoles")

  // SISTEMA EAV PARA ATRIBUTOS
  attributes                      PlayerAttribute[]   @relation("PlayerAttributes")

  // Single column indexes
  @@index([player_name])
  @@index([position_player])
  @@index([team_name])
  @@index([nationality_1])
  @@index([player_rating])
  @@index([createdAt])
  @@index([team_id])
  @@index([position_id])
  @@index([nationality_id])
  @@index([agency_id])
  @@index([wyscout_id_1])
  @@index([wyscout_id_2])
  @@index([updatedAt(sort: Desc)])

  // Composite indexes for common queries
  @@index([createdAt(sort: Desc), id_player], map: "idx_player_pagination")
  @@index([player_rating(sort: Desc), createdAt(sort: Desc)], map: "idx_player_rating_created")
  @@index([player_name, position_player, nationality_1], map: "idx_player_search_composite")
  @@index([team_name, position_player], map: "idx_player_team_position")

  // NEW: Performance-critical composite indexes
  @@index([wyscout_id_1, wyscout_id_2], map: "idx_wyscout_ids") // Import optimization
  @@index([player_rating(sort: Desc), age, position_player], map: "idx_rating_age_position") // Filtered searches
  @@index([team_name, player_rating(sort: Desc)], map: "idx_team_rating") // Team + rating
  @@index([nationality_1, position_player, player_rating(sort: Desc)], map: "idx_nat_pos_rating") // Common filters
  @@index([position_player, age, player_rating(sort: Desc)], map: "idx_pos_age_rating") // Position filtering
  @@index([team_competition, player_rating(sort: Desc)], map: "idx_competition_rating") // Competition queries
  @@index([approval_status, createdAt(sort: Desc)], map: "idx_approval_status_created") // Approval workflow
  @@index([created_by_scout_id, approval_status], map: "idx_scout_approval") // Scout's pending players

  @@map("jugadores")
}

model Equipo {
  id_team              String     @id @default(cuid())
  team_name            String
  correct_team_name    String?
  team_country         String?
  url_trfm_advisor     String?
  url_trfm             String?
  owner_club           String?
  owner_club_country   String?
  pre_competition      String?
  competition          String?
  correct_competition  String?
  competition_country  String?
  team_trfm_value      Float?
  team_trfm_value_norm Float?
  team_rating          Float?
  team_rating_norm     Float?
  team_elo             Float?
  team_level           String?
  // Campos adicionales de Team
  short_name           String?
  founded_year         Int?
  stadium              String?
  website_url          String?
  logo_url             String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relaciones
  players              Jugador[]  @relation("PlayerTeam")
  jobOffers            JobOffer[] @relation("TeamJobOffers")

  @@index([team_name])
  @@index([team_country])
  @@index([competition])
  @@index([competition_country])
  @@index([team_rating])
  @@index([createdAt])
  @@map("equipos")
}

// MODELO ELIMINADO - Consolidado en Competition (tabla normalizada)
// Todos los torneos ahora usan el modelo Competition que tiene estructura normalizada
// con foreign keys a Country y mejores índices

model Torneo {
  id_torneo                String       @id @default(cuid())
  nombre                   String
  descripcion              String?
  pais                     String?
  ciudad                   String?
  fecha_inicio             DateTime
  fecha_fin                DateTime
  tipo_torneo              String
  categoria                String?
  genero                   String
  estado                   String       @default("planificado")
  max_equipos              Int?
  equipos_inscritos        Int          @default(0)
  premio_primero           Float?
  premio_segundo           Float?
  premio_tercero           Float?
  organizador              String?
  contacto_email           String?
  contacto_telefono        String?
  sitio_web                String?
  redes_sociales           Json?
  reglas_especiales        String?
  requisitos_inscripcion   String?
  fecha_limite_inscripcion DateTime?
  imagen_url               String?
  banner_url               String?
  es_publico               Boolean      @default(true)
  es_gratuito              Boolean      @default(false)
  costo_inscripcion        Float?
  moneda                   String       @default("EUR")
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  pdf_url                  String?
  competition_id           String?
  competition              Competition? @relation(fields: [competition_id], references: [id_competition])

  @@index([nombre])
  @@index([pais])
  @@index([ciudad])
  @@index([tipo_torneo])
  @@index([categoria])
  @@index([genero])
  @@index([estado])
  @@index([fecha_inicio])
  @@index([fecha_fin])
  @@index([es_publico])
  @@index([createdAt])
  @@index([competition_id])
  @@map("torneos")
}

model Reporte {
  // ===== CAMPOS ESENCIALES DEL REPORTE =====
  id_report                   String    @id @default(cuid())
  report_status               String?
  report_validation           String?
  report_author               String?
  scout_id                    String?
  report_date                 DateTime?
  report_type                 String?
  id_player                   String?   // Foreign key - toda la info del jugador viene de aquí
  report_format               String?
  form_url_report             String?
  form_url_video              String?
  form_text_report            String?

  // ===== CAMPOS DE ANÁLISIS DEL SCOUT =====
  // Estos son evaluaciones/snapshot del scout al momento del reporte
  form_potential              String?   // Evaluación de potencial por el scout
  roi                         Float?    // Return on investment estimado
  profit                      Float?    // Beneficio estimado

  // ===== SNAPSHOT HISTÓRICO (al momento del reporte) =====
  // Estos campos capturan el estado del jugador CUANDO se hizo el reporte
  initial_age                 Int?
  initial_player_trfm_value   Float?
  initial_team                String?
  correct_initial_team        String?
  initial_team_elo            Float?
  initial_team_level          String?
  initial_competition         String?
  initial_competition_country String?
  initial_competition_elo     Float?
  initial_competition_level   String?
  transfer_team_pts           Float?    // Puntos de análisis de transferencia
  transfer_competition_pts    Float?

  // ===== CAMPOS DE APROBACIÓN =====
  approval_status             String    @default("pending") // "pending", "approved", "rejected"
  approved_by_admin_id        String?   // ID del admin que aprobó/rechazó
  approval_date               DateTime? // Fecha de aprobación/rechazo
  rejection_reason            String?   // Motivo de rechazo (opcional)

  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // ===== RELACIONES =====
  scout                       Scout?    @relation(fields: [scout_id], references: [id_scout])
  player                      Jugador?  @relation(fields: [id_player], references: [id_player])

  // ===== ÍNDICES OPTIMIZADOS =====
  @@index([report_status])
  @@index([report_validation])
  @@index([report_author])
  @@index([report_date])
  @@index([report_type])
  @@index([id_player])        // Principal para joins con Jugador
  @@index([scout_id])         // Principal para joins con Scout
  @@index([createdAt])
  @@index([approval_status])  // Para filtrar reportes pendientes
  @@map("reportes")
}

// NOTA FASE 3: Campos eliminados (57 campos redundantes)
// Toda la información actual del jugador se accede vía relación player:
// - Nombre: player.player_name, player.complete_player_name
// - Fechas: player.date_of_birth, player.age
// - Equipo: player.team.team_name, player.team.team_country
// - Competición: player.team_competition, player.competition_country
// - Préstamo: player.owner_club, player.on_loan
// - Físicas: player.position.name, player.foot, player.height
// - Nacionalidad: player.nationality.name, player.nationality.code
// - Agencia: player.agencyRelation.name, player.contract_end
// - URLs: player.url_trfm, player.url_instagram
// - Valor actual: player.player_trfm_value

model Scout {
  id_scout                           String      @id @default(cuid())
  clerkId                            String?     @unique
  join_date                          DateTime?
  scout_name                         String?
  name                               String?
  surname                            String?
  date_of_birth                      DateTime?
  age                                Int?
  nationality                        String?
  email                              String?
  phone                              String?
  address                            String?
  city                               String?
  country                            String?
  favourite_club                     String?
  open_to_work                       Boolean?
  professional_experience            String?
  twitter_profile                    String?
  instagram_profile                  String?
  linkedin_profile                   String?
  url_profile                        String?
  total_reports                      Int?
  total_reports_norm                 Float?
  total_reports_rank                 Int?
  original_reports                   Int?
  original_reports_norm              Float?
  original_reports_rank              Int?
  nationality_expertise              String?
  competition_expertise              String?
  avg_potential                      Float?
  avg_initial_age                    Float?
  avg_initial_age_norm               Float?
  total_investment                   Float?
  total_investment_rank              Int?
  total_investment_orig              Float?
  total_investment_orig_rank         Int?
  previous_total_investment          Float?
  previous_total_investment_date     DateTime?
  total_investment_change_percent    Float?
  total_investment_last_updated      DateTime?
  net_profits                        Float?
  net_profits_rank                   Int?
  net_profits_orig                   Float?
  net_profits_orig_rank              Int?
  previous_net_profits               Float?
  previous_net_profits_date          DateTime?
  net_profits_change_percent         Float?
  net_profits_last_updated           DateTime?
  roi                                Float?
  roi_norm                           Float?
  roi_rank                           Int?
  roi_orig                           Float?
  roi_orig_rank                      Int?
  previous_roi                       Float?
  previous_roi_date                  DateTime?
  roi_change_percent                 Float?
  roi_last_updated                   DateTime?
  avg_initial_trfm_value             Float?
  avg_initial_trfm_value_rank        Int?
  avg_initial_trfm_value_orig        Float?
  avg_initial_trfm_value_orig_rank   Int?
  previous_avg_initial_trfm_value    Float?
  previous_avg_initial_trfm_value_date DateTime?
  avg_initial_trfm_value_change_percent Float?
  avg_initial_trfm_value_last_updated DateTime?
  max_profit_report                  Float?
  max_profit_report_rank             Int?
  previous_max_profit_report         Float?
  previous_max_profit_report_date    DateTime?
  max_profit_report_change_percent   Float?
  max_profit_report_last_updated     DateTime?
  min_profit_report                  Float?
  min_profit_report_rank             Int?
  previous_min_profit_report         Float?
  previous_min_profit_report_date    DateTime?
  min_profit_report_change_percent   Float?
  min_profit_report_last_updated     DateTime?
  avg_profit_report                  Float?
  avg_profit_report_norm             Float?
  avg_profit_report_rank             Int?
  avg_profit_report_orig             Float?
  avg_profit_report_orig_rank        Int?
  previous_avg_profit_report         Float?
  previous_avg_profit_report_date    DateTime?
  avg_profit_report_change_percent   Float?
  avg_profit_report_last_updated     DateTime?
  transfer_team_pts                  Float?
  transfer_team_pts_norm             Float?
  transfer_team_pts_rank             Int?
  transfer_team_pts_orig             Float?
  transfer_team_pts_orig_rank        Int?
  previous_transfer_team_pts         Float?
  previous_transfer_team_pts_date    DateTime?
  transfer_team_pts_change_percent   Float?
  transfer_team_pts_last_updated     DateTime?
  avg_initial_team_elo               Float?
  avg_initial_team_level             String?
  transfer_competition_pts           Float?
  transfer_competition_pts_norm      Float?
  transfer_competition_pts_rank      Int?
  transfer_competition_pts_orig      Float?
  transfer_competition_pts_orig_rank Int?
  previous_transfer_competition_pts  Float?
  previous_transfer_competition_pts_date DateTime?
  transfer_competition_pts_change_percent Float?
  transfer_competition_pts_last_updated DateTime?
  avg_initial_competition_elo        Float?
  avg_initial_competition_level      String?
  scout_elo                          Float?
  scout_level                        String?
  scout_ranking                      Int?
  
  // NUEVA FOREIGN KEY NORMALIZADA
  nationality_id                     String?
  
  createdAt                          DateTime    @default(now())
  updatedAt                          DateTime    @updatedAt
  scoutLists                         ScoutList[]
  reportes                           Reporte[]

  // NUEVA RELACIÓN NORMALIZADA
  nationalityCountry                 Country?    @relation("ScoutNationality", fields: [nationality_id], references: [id])

  @@index([scout_name])
  @@index([name])
  @@index([surname])
  @@index([nationality])
  @@index([email])
  @@index([clerkId])
  @@index([country])
  @@index([favourite_club])
  @@index([open_to_work])
  @@index([total_reports])
  @@index([original_reports])
  @@index([nationality_expertise])
  @@index([competition_expertise])
  @@index([scout_elo])
  @@index([scout_level])
  @@index([scout_ranking])
  @@index([createdAt])
  @@index([nationality_id])
  @@map("scouts")
}

model RadarMetrics {
  id                String   @id @default(cuid())
  playerId          String
  category          String
  playerValue       Float
  percentile        Float?
  period            String
  calculatedAt      DateTime @default(now())
  comparisonAverage Float?
  dataCompleteness  Float
  rank              Int?
  sourceAttributes  Json
  totalPlayers      Int?
  player            Jugador  @relation(fields: [playerId], references: [id_player], onDelete: Cascade)

  @@unique([playerId, category, period])
  @@index([category, period])
  @@index([playerId])
  @@index([calculatedAt])

  // NEW: Performance indexes for radar queries
  @@index([playerId, category, period], map: "idx_radar_player_cat_period")
  @@index([category, percentile(sort: Desc)], map: "idx_radar_category_percentile")

  @@map("radar_metrics")
}

model DataPopulationLog {
  id               String   @id @default(cuid())
  playerId         String
  tableName        String
  fieldName        String
  originalValue    String?
  populatedValue   Float
  populationMethod String
  createdAt        DateTime @default(now())
  player           Jugador  @relation(fields: [playerId], references: [id_player], onDelete: Cascade)

  @@index([playerId, tableName])
  @@index([tableName, fieldName])
  @@index([createdAt])
  @@index([playerId, tableName], map: "idx_data_population_log_player_table")
  @@map("data_population_log")
}

model BeeswarmData {
  id          String   @id @default(cuid())
  metric      String
  playerId    String
  playerName  String
  value       Float
  position    String
  age         Int
  nationality String
  competition String
  trfmValue   Float?
  isSelected  Boolean  @default(false)
  period      String
  createdAt   DateTime @default(now())
  player      Jugador  @relation(fields: [playerId], references: [id_player], onDelete: Cascade)

  @@index([metric])
  @@index([position])
  @@index([age])
  @@index([nationality])
  @@index([competition])
  @@index([period])
  @@index([metric, position])
  @@map("beeswarm_data")
}

model LollipopData {
  id           String   @id @default(cuid())
  playerId     String
  metricName   String
  value        Float
  rank         Int
  totalPlayers Int
  percentile   Float
  category     String
  period       String
  position     String
  createdAt    DateTime @default(now())
  player       Jugador  @relation(fields: [playerId], references: [id_player], onDelete: Cascade)

  @@index([playerId])
  @@index([metricName])
  @@index([category])
  @@index([period])
  @@index([playerId, period])
  @@map("lollipop_data")
}

model PlayerList {
  id        String   @id @default(cuid())
  userId    String
  playerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    Jugador  @relation(fields: [playerId], references: [id_player], onDelete: Cascade)
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, playerId])
  @@index([userId])
  @@index([playerId])
  @@index([createdAt])
  @@map("player_lists")
}

model ScoutList {
  id        String   @id @default(cuid())
  userId    String
  scoutId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scout     Scout    @relation(fields: [scoutId], references: [id_scout], onDelete: Cascade)
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, scoutId], map: "userId_scoutId")
  @@index([userId])
  @@index([scoutId])
  @@index([createdAt])
  @@map("scout_lists")
}

model PlayerStats3m {
  id_player                         String   @id
  wyscout_id                        BigInt?
  stats_evo_3m                      Decimal? @db.Decimal(6, 2)
  matches_played_tot_3m             Int?
  matches_played_tot_3m_norm        Decimal? @db.Decimal(5, 2)
  matches_played_tot_3m_rank        Int?
  minutes_played_tot_3m             Int?
  minutes_played_tot_3m_norm        Decimal? @db.Decimal(5, 2)
  minutes_played_tot_3m_rank        Int?
  goals_p90_3m                      Decimal? @db.Decimal(7, 3)
  goals_p90_3m_norm                 Decimal? @db.Decimal(5, 2)
  goals_p90_3m_rank                 Int?
  goals_tot_3m                      Int?
  goals_tot_3m_norm                 Decimal? @db.Decimal(5, 2)
  assists_p90_3m                    Decimal? @db.Decimal(7, 3)
  assists_p90_3m_norm               Decimal? @db.Decimal(5, 2)
  assists_p90_3m_rank               Int?
  assists_tot_3m                    Int?
  assists_tot_3m_norm               Decimal? @db.Decimal(5, 2)
  yellow_cards_p90_3m               Decimal? @db.Decimal(7, 3)
  yellow_cards_p90_3m_norm          Decimal? @db.Decimal(5, 2)
  yellow_cards_p90_rank             Int?
  yellow_cards_p90_3m_norm_neg      Decimal? @db.Decimal(5, 2)
  yellow_cards_tot_3m               Int?
  yellow_cards_tot_3m_norm          Decimal? @db.Decimal(5, 2)
  red_cards_p90_3m                  Decimal? @db.Decimal(7, 3)
  red_cards_p90_3m_norm             Decimal? @db.Decimal(5, 2)
  red_cards_p90_rank                Int?
  red_cards_p90_3m_norm_neg         Decimal? @db.Decimal(5, 2)
  red_cards_tot_3m                  Int?
  red_cards_tot_3m_norm             Decimal? @db.Decimal(5, 2)
  conceded_goals_p90_3m             Decimal? @db.Decimal(7, 3)
  conceded_goals_p90_3m_norm        Decimal? @db.Decimal(5, 2)
  conceded_goals_p90_3m_rank        Int?
  conceded_goals_p90_3m_norm_neg    Decimal? @db.Decimal(5, 2)
  conceded_goals_tot_3m             Int?
  conceded_goals_tot_3m_norm        Decimal? @db.Decimal(5, 2)
  prevented_goals_p90_3m            Decimal? @db.Decimal(7, 3)
  prevented_goals_p90_3m_norm       Decimal? @db.Decimal(5, 2)
  prevented_goals_p90_rank          Int?
  prevented_goals_tot_3m            Decimal? @db.Decimal(7, 3)
  prevented_goals_tot_3m_norm       Decimal? @db.Decimal(5, 2)
  shots_against_p90_3m              Decimal? @db.Decimal(7, 3)
  shots_against_p90_3m_norm         Decimal? @db.Decimal(5, 2)
  shots_against_p90_3m_rank         Int?
  shots_against_tot_3m              Int?
  shots_against_tot_3m_norm         Decimal? @db.Decimal(5, 2)
  clean_sheets_percent_3m           Decimal? @map("clean_sheets_%_3m") @db.Decimal(5, 2)
  clean_sheets_percent_3m_norm      Decimal? @map("clean_sheets_%_3m_norm") @db.Decimal(5, 2)
  clean_sheets_percent_3m_rank      Int?     @map("clean_sheets_%_3m_rank")
  clean_sheets_tot_3m               Int?
  clean_sheets_tot_3m_norm          Decimal? @db.Decimal(5, 2)
  save_rate_percent_3m              Decimal? @map("save_rate_%_3m") @db.Decimal(5, 2)
  save_rate_percent_3m_norm         Decimal? @map("save_rate_%_3m_norm") @db.Decimal(5, 2)
  save_rate_percent_3m_rank         Int?     @map("save_rate_%_3m_rank")
  tackles_p90_3m                    Decimal? @db.Decimal(7, 3)
  tackles_p90_3m_norm               Decimal? @db.Decimal(5, 2)
  tackles_p90_3m_rank               Int?
  tackles_tot_3m                    Int?
  tackles_tot_3m_norm               Decimal? @db.Decimal(5, 2)
  interceptions_p90_3m              Decimal? @db.Decimal(7, 3)
  interceptions_p90_3m_norm         Decimal? @db.Decimal(5, 2)
  interceptions_p90_3m_rank         Int?
  interceptions_tot_3m              Int?
  interceptions_tot_3m_norm         Decimal? @db.Decimal(5, 2)
  fouls_p90_3m                      Decimal? @db.Decimal(7, 3)
  fouls_p90_3m_norm                 Decimal? @db.Decimal(5, 2)
  fouls_p90_3m_rank                 Int?
  fouls_p90_3m_norm_neg             Decimal? @db.Decimal(5, 2)
  fouls_tot_3m                      Int?
  fouls_tot_3m_norm                 Decimal? @db.Decimal(5, 2)
  passes_p90_3m                     Decimal? @db.Decimal(7, 3)
  passes_p90_3m_norm                Decimal? @db.Decimal(5, 2)
  passes_p90_3m_rank                Int?
  passes_tot_3m                     Int?
  passes_tot_3m_norm                Decimal? @db.Decimal(5, 2)
  forward_passes_p90_3m             Decimal? @db.Decimal(7, 3)
  forward_passes_p90_3m_norm        Decimal? @db.Decimal(5, 2)
  forward_passes_p90_3m_rank        Int?
  forward_passes_tot_3m             Int?
  forward_passes_tot_3m_norm        Decimal? @db.Decimal(5, 2)
  crosses_p90_3m                    Decimal? @db.Decimal(7, 3)
  crosses_p90_3m_norm               Decimal? @db.Decimal(5, 2)
  crosses_p90_3m_rank               Int?
  crosses_tot_3m                    Int?
  crosses_tot_3m_norm               Decimal? @db.Decimal(5, 2)
  accurate_passes_percent_3m        Decimal? @map("accurate_passes_%_3m") @db.Decimal(5, 2)
  accurate_passes_percent_3m_norm   Decimal? @map("accurate_passes_%_3m_norm") @db.Decimal(5, 2)
  accurate_passes_percent_3m_rank   Int?     @map("accurate_passes_%_3m_rank")
  shots_p90_3m                      Decimal? @db.Decimal(7, 3)
  shots_p90_3m_norm                 Decimal? @db.Decimal(5, 2)
  shots_p90_3m_rank                 Int?
  shots_tot_3m                      Int?
  shots_tot_3m_norm                 Decimal? @db.Decimal(5, 2)
  effectiveness_percent_3m          Decimal? @map("effectiveness_%_3m") @db.Decimal(5, 2)
  effectiveness_percent_3m_norm     Decimal? @map("effectiveness_%_3m_norm") @db.Decimal(5, 2)
  effectiveness_percent_3m_rank     Int?     @map("effectiveness_%_3m_rank")
  off_duels_p90_3m                  Decimal? @db.Decimal(7, 3)
  off_duels_p90_3m_norm             Decimal? @db.Decimal(5, 2)
  off_duels_p90_3m_rank             Int?
  off_duels_tot_3m                  Int?
  off_duels_tot_3m_norm             Decimal? @db.Decimal(5, 2)
  off_duels_won_percent_3m          Decimal? @map("off_duels_won_%_3m") @db.Decimal(5, 2)
  off_duels_won_percent_3m_norm     Decimal? @map("off_duels_won_%_3m_norm") @db.Decimal(5, 2)
  off_duels_won_percent_3m_rank     Int?     @map("off_duels_won_%_3m_rank")
  def_duels_p90_3m                  Decimal? @db.Decimal(7, 3)
  def_duels_p90_3m_norm             Decimal? @db.Decimal(5, 2)
  def_duels_p90_3m_rank             Int?
  def_duels_tot_3m                  Int?
  def_duels_tot_3m_norm             Decimal? @db.Decimal(5, 2)
  def_duels_won_percent_3m          Decimal? @map("def_duels_won_%_3m") @db.Decimal(5, 2)
  def_duels_won_percent_3m_norm     Decimal? @map("def_duels_won_%_3m_norm") @db.Decimal(5, 2)
  def_duels_won_percent_3m_rank     Int?     @map("def_duels_won_%_3m_rank")
  aerials_duels_p90_3m              Decimal? @db.Decimal(7, 3)
  aerials_duels_p90_3m_norm         Decimal? @db.Decimal(5, 2)
  aerials_duels_p90_3m_rank         Int?
  aerials_duels_tot_3m              Int?
  aerials_duels_tot_3m_norm         Decimal? @db.Decimal(5, 2)
  aerials_duels_won_percent_3m      Decimal? @map("aerials_duels_won_%_3m") @db.Decimal(5, 2)
  aerials_duels_won_percent_3m_norm Decimal? @map("aerials_duels_won_%_3m_norm") @db.Decimal(5, 2)
  aerials_duels_won_percent_3m_rank Int?     @map("aerials_duels_won_%_3m_rank")
  created_at                        DateTime @default(now()) @map("created_at")
  updated_at                        DateTime @updatedAt @map("updated_at")
  player                            Jugador  @relation(fields: [id_player], references: [id_player], onDelete: Cascade)

  // Single indexes
  @@index([id_player])
  @@index([goals_p90_3m(sort: Desc)])
  @@index([assists_p90_3m(sort: Desc)])
  @@index([stats_evo_3m(sort: Desc)])
  @@index([goals_p90_3m_rank])
  @@index([assists_p90_3m_rank])
  @@index([clean_sheets_percent_3m(sort: Desc)])
  @@index([save_rate_percent_3m(sort: Desc)])
  @@index([created_at(sort: Desc)])
  @@index([updated_at(sort: Desc)])
  @@index([id_player], map: "idx_player_stats_3m_player_id")

  // NEW: Composite indexes for performance
  @@index([id_player, matches_played_tot_3m(sort: Desc)], map: "idx_stats_player_matches")
  @@index([goals_p90_3m(sort: Desc), assists_p90_3m(sort: Desc)], map: "idx_stats_goals_assists")
  @@index([id_player, goals_p90_3m(sort: Desc)], map: "idx_stats_player_goals")

  @@map("player_stats_3m")
}

model OnDemandMessage {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  userName  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("on_demand_messages")
}

model ScoutContactMessage {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  userName  String
  scoutId   String
  scoutName String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scoutId])
  @@index([createdAt])
  @@map("scout_contact_messages")
}

model Atributos {
  id_player                         String   @id
  id_fmi                            Int?
  total_fmi_pts                     Int?
  total_fmi_pts_norm                Int?
  corners_fmi                       Int?
  crossing_fmi                      Int?
  dribbling_fmi                     Int?
  finishing_fmi                     Int?
  first_touch_fmi                   Int?
  free_kick_taking_fmi              Int?
  heading_fmi                       Int?
  long_shots_fmi                    Int?
  passing_fmi                       Int?
  penalty_taking_fmi                Int?
  tackling_fmi                      Int?
  technique_fmi                     Int?
  marking_fmi                       Int?
  off_the_ball_fmi                  Int?
  positioning_fmi                   Int?
  long_throws_fmi                   Int?
  acceleration_fmi                  Int?
  agility_fmi                       Int?
  balance_fmi                       Int?
  jumping_fmi                       Int?
  natural_fitness_fmi               Int?
  pace_fmi                          Int?
  stamina_fmi                       Int?
  strength_fmi                      Int?
  aggression_fmi                    Int?
  anticipation_fmi                  Int?
  bravery_fmi                       Int?
  composure_fmi                     Int?
  concentration_fmi                 Int?
  decisions_fmi                     Int?
  determination_fmi                 Int?
  flair_fmi                         Int?
  leadership_fmi                    Int?
  team_work_fmi                     Int?
  vision_fmi                        Int?
  work_rate_fmi                     Int?
  aerial_ability_fmi                Int?
  command_of_area_fmi               Int?
  communication_fmi                 Int?
  eccentricity_fmi                  Int?
  handling_fmi                      Int?
  kicking_fmi                       Int?
  one_on_ones_fmi                   Int?
  tendency_to_punch_fmi             Int?
  reflexes_fmi                      Int?
  rushing_out_fmi                   Int?
  throwing_fmi                      Int?
  left_foot_fmi                     Int?
  right_foot_fmi                    Int?
  consistency_fmi                   Int?
  dirtiness_fmi                     Int?
  important_matches_fmi             Int?
  injury_proness_fmi                Int?
  versality_fmi                     Int?
  adaptability_fmi                  Int?
  ambition_fmi                      Int?
  loyalty_fmi                       Int?
  pressure_fmi                      Int?
  professional_fmi                  Int?
  sportsmanship_fmi                 Int?
  temperament_fmi                   Int?
  controversy_fmi                   Int?
  goalkeeper_fmi                    Int?
  gk_level                          Int?
  defender_right_fmi                Int?
  rb_level                          Int?
  defender_central_fmi              Int?
  cb_level                          Int?
  defender_left_fmi                 Int?
  lb_level                          Int?
  wing_back_right_fmi               Int?
  rwb_level                         Int?
  defensive_midfielder_fmi          Int?
  dm_level                          Int?
  wing_back_left_fmi                Int?
  lwb_level                         Int?
  midfielder_right_fmi              Int?
  rm_level                          Int?
  midfielder_central_fmi            Int?
  cm_level                          Int?
  midfielder_left_fmi               Int?
  lm_level                          Int?
  attacking_mid_right_fmi           Int?
  rw_level                          Int?
  attacking_mid_central_fmi         Int?
  am_level                          Int?
  attacking_mid_left_fmi            Int?
  lw_level                          Int?
  striker_fmi                       Int?
  st_level                          Int?
  gk_dominator                      Int?
  gk_dominator_percent              Int?
  gk_reactive                       Int?
  gk_reactive_percent               Int?
  gk_initiator                      Int?
  gk_initiator_percent              Int?
  central_def_aggressor             Int?
  central_def_aggressor_percent     Int?
  central_def_spreader              Int?
  central_def_spreader_percent      Int?
  central_def_anchor                Int?
  central_def_anchor_percent        Int?
  wide_def_overlapper               Int?
  wide_def_overlapper_percent       Int?
  wide_def_progressor               Int?
  wide_def_progressor_percent       Int?
  wide_def_safety                   Int?
  wide_def_safety_percent           Int?
  deep_mid_box_to_box               Int?
  deep_mid_box_to_box_percent       Int?
  deep_mid_distributor              Int?
  deep_mid_distributor_percent      Int?
  deep_mid_builder                  Int?
  deep_mid_builder_percent          Int?
  advanced_mid_box_crasher          Int?
  advanced_mid_box_crasher_percent  Int?
  advanced_mid_creator              Int?
  advanced_mid_creator_percent      Int?
  advanced_mid_orchestrator         Int?
  advanced_mid_orchestrator_percent Int?
  wide_att_outlet                   Int?
  wide_att_outlet_percent           Int?
  wide_att_unlocker                 Int?
  wide_att_unlocker_percent         Int?
  wide_att_threat                   Int?
  wide_att_threat_percent           Int?
  central_att_roamer                Int?
  central_att_roamer_percent        Int?
  central_att_target                Int?
  central_att_target_percent        Int?
  central_att_finisher              Int?
  central_att_finisher_percent      Int?
  sprinter                          Int?
  sprinter_level                    Int?
  marathonian                       Int?
  marathonian_level                 Int?
  bomberman                         Int?
  bomberman_level                   Int?
  three_sixty                       Int?
  three_sixty_level                 Int?
  the_rock                          Int?
  the_rock_level                    Int?
  air_flyer                         Int?
  air_flyer_level                   Int?
  one_vs_one_off                    Int?
  one_vs_one_off_level              Int?
  intelligence                      Int?
  intelligence_level                Int?
  game_pace                         Int?
  game_pace_level                   Int?
  striking                          Int?
  striking_level                    Int?
  ball_control                      Int?
  ball_control_level                Int?
  creativity                        Int?
  creativity_level                  Int?
  one_vs_one_def                    Int?
  one_vs_one_def_level              Int?
  reliability                       Int?
  reliability_level                 Int?
  competitiveness                   Int?
  competitiveness_level             Int?
  injury_resistance                 Int?
  injury_resistance_level           Int?
  transition                        Int?
  transition_level                  Int?
  keeping_the_ball                  Int?
  keeping_the_ball_level            Int?
  progression                       Int?
  progression_level                 Int?
  finishing_archetype               Int?
  finishing_level                   Int?
  set_piece                         Int?
  set_piece_level                   Int?
  aerial_play                       Int?
  aerial_play_level                 Int?
  ball_recovery                     Int?
  ball_recovery_level               Int?
  defensive_shape                   Int?
  defensive_shape_level             Int?
  goal_saving                       Int?
  goal_saving_level                 Int?
  positional_att_tendency           Int?
  positional_att_tendency_percent   Int?
  direct_att_tendency               Int?
  direct_att_tendency_percent       Int?
  positional_att_dominance          Int?
  positional_att_dominance_level    Int?
  direct_att_dominance              Int?
  direct_att_dominance_level        Int?
  low_block_def_tendency            Int?
  low_block_def_tendency_percent    Int?
  high_block_def_tendency           Int?
  high_block_def_tendency_percent   Int?
  low_block_def_dominance           Int?
  low_block_def_dominance_level     Int?
  high_block_def_dominance          Int?
  high_block_def_dominance_level    Int?
  influence_off_tendency            Int?
  influence_off_tendency_percent    Int?
  influence_def_tendency            Int?
  influence_def_tendency_percent    Int?
  influence_off_dominance           Int?
  influence_off_dominance_level     Int?
  influence_def_dominance           Int?
  influence_def_dominance_level     Int?
  open_spaces_tendency              Int?
  open_spaces_tendency_percent      Int?
  tight_spaces_tendency             Int?
  tight_spaces_tendency_percent     Int?
  open_spaces_dominance             Int?
  open_spaces_dominance_level       Int?
  tight_spaces_dominance            Int?
  tight_spaces_dominance_level      Int?
  right_foot_tendency               Int?
  right_foot_tendency_percent       Int?
  left_foot_tendency                Int?
  left_foot_tendency_percent        Int?
  right_foot_dominance              Int?
  right_foot_dominance_level        Int?
  left_foot_dominance               Int?
  left_foot_dominance_level         Int?
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  player                            Jugador  @relation(fields: [id_player], references: [id_player], onDelete: Cascade)

  @@index([id_fmi])
  @@index([total_fmi_pts])
  @@index([sprinter_level])
  @@index([marathonian_level])
  @@index([bomberman_level])
  @@index([the_rock_level])
  @@index([air_flyer_level])
  @@index([goalkeeper_fmi])
  @@index([striker_fmi])
  @@index([createdAt])
  @@map("atributos")
}

// MODELO ELIMINADO - Tabla junction redundante (LIMPIEZA POST-FASE 3)
// ScoutPlayerReport era una junction table prácticamente sin uso (1/76 registros)
// Las relaciones directas en Reporte (scout_id, id_player) son suficientes
// Eliminada para simplificar el schema sin pérdida de funcionalidad
//
// Relaciones existentes en Reporte:
// - Reporte.scout_id → Scout (directo)
// - Reporte.id_player → Jugador (directo)
// Estas relaciones 1:N cubren todos los casos de uso actuales

// ============================================================================
// NUEVAS TABLAS NORMALIZADAS - FASE 1 DE OPTIMIZACIÓN
// ============================================================================

model Country {
  id                String        @id @default(cuid())
  name              String        @unique
  code              String        @unique // ES, BR, AR, FR, etc.
  confederation     String?       // UEFA, CONMEBOL, AFC, etc.
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relaciones
  players           Jugador[]     @relation("PlayerNationality")
  competitions      Competition[]
  scouts            Scout[]       @relation("ScoutNationality")
  agencies          Agency[]
  
  @@index([code])
  @@index([confederation])
  @@map("countries")
}

model Position {
  id                String        @id @default(cuid())
  name              String        @unique // "Goalkeeper", "Centre-Back", etc.
  short_name        String        @unique // "GK", "CB", "CM", etc.
  category          String        // "Goalkeeper", "Defender", "Midfielder", "Forward"
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relaciones
  players           Jugador[]     @relation("PlayerPosition")
  
  @@index([category])
  @@map("positions")
}

model Competition {
  id_competition                String        @id @default(cuid())
  competition_name              String?
  correct_competition_name      String?
  competition_country           String?
  url_trfm                      String?
  competition_confederation     String?       // UEFA, CONMEBOL, etc.
  competition_tier              Int?          // 1, 2, 3, etc.
  competition_trfm_value        Float?
  competition_trfm_value_norm   Float?
  competition_rating            Float?
  competition_rating_norm       Float?
  competition_elo               Float?
  competition_level             String?

  // Campos legacy (mantener para compatibilidad)
  name                          String?       // Legacy: will migrate to competition_name
  short_name                    String?       // "EPL", "LaLiga", etc.
  country_id                    String?
  tier                          Int?          // 1, 2, 3, etc.
  confederation                 String?       // UEFA, CONMEBOL, etc.
  season_format                 String?       // "League", "Cup", "Playoff"

  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt

  // Relaciones
  country                       Country?      @relation(fields: [country_id], references: [id])
  torneos                       Torneo[]

  @@index([competition_name])
  @@index([competition_country])
  @@index([competition_confederation])
  @@index([competition_tier])
  @@index([competition_rating])
  @@index([competition_elo])
  @@index([country_id])
  @@index([tier])
  @@index([confederation])
  @@map("competitions")
}

// MODELO ELIMINADO - Consolidado en Equipo
// model Team {
//   Todas las funcionalidades ahora están en el modelo Equipo
// }

model Agency {
  id                String        @id @default(cuid())
  name              String        @unique
  country_id        String?
  website_url       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relaciones
  country           Country?      @relation(fields: [country_id], references: [id])
  players           Jugador[]     @relation("PlayerAgency")
  
  @@index([country_id])
  @@map("agencies")
}

model PlayerCorrection {
  id                String        @id @default(cuid())
  player_id         String
  field_name        String        // "team_name", "position", "nationality", etc.
  original_value    String?
  corrected_value   String
  correction_date   DateTime      @default(now())
  corrected_by      String?       // Usuario que hizo la corrección
  is_verified       Boolean       @default(false)

  // Relaciones
  player            Jugador       @relation("PlayerCorrections", fields: [player_id], references: [id_player], onDelete: Cascade)

  // FIXED: Permitir múltiples correcciones del mismo campo en diferentes fechas
  @@unique([player_id, field_name, correction_date])
  @@index([player_id])
  @@index([field_name])
  @@index([correction_date])
  @@map("player_corrections")
}

model PlayerMetric {
  id                String        @id @default(cuid())
  player_id         String
  metric_name       String        // "goals_p90", "assists_p90", "pass_accuracy", etc.
  value             Float
  period            String        // "3m", "season", "career"
  category          String?       // "attack", "defense", "passing", "physical"
  
  // Métricas calculadas
  percentile        Float?        // Percentil comparativo (0-100)
  rank              Int?          // Ranking global
  total_players     Int?          // Total de jugadores en la comparación
  
  date_calculated   DateTime      @default(now())
  data_source       String?       // "wyscout", "manual", "calculated"
  
  // Relaciones
  player            Jugador       @relation("PlayerMetrics", fields: [player_id], references: [id_player], onDelete: Cascade)
  
  @@unique([player_id, metric_name, period])
  @@index([metric_name, period])
  @@index([category, period])
  @@index([player_id, category])
  @@map("player_metrics")
}

model PlayerRole {
  id          String   @id @default(cuid())
  player_id   String
  role_name   String   // "GK Dominator", "Central Att Finisher", etc.
  percentage  Float    // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  player      Jugador  @relation("PlayerRoles", fields: [player_id], references: [id_player], onDelete: Cascade)

  @@unique([player_id, role_name])
  @@index([player_id])
  @@index([role_name])
  @@map("player_roles")
}

// ============================================================================
// TABLA DE CONTADORES - Para IDs secuenciales
// ============================================================================

model SequenceCounter {
  id           String   @id @default(cuid())
  entity_type  String   // "reporte", "torneo", etc.
  year         Int      // 2024, 2025, etc.
  last_number  Int      @default(0) // Último número usado
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([entity_type, year])
  @@index([entity_type, year])
  @@map("sequence_counters")
}

// ============================================================================
// SISTEMA EAV PARA ATRIBUTOS - Reemplazo flexible de tabla Atributos
// ============================================================================

model AttributeDefinition {
  id                String             @id @default(cuid())
  name              String             @unique // "passing_short", "dribbling_close", etc.
  display_name      String             // "Short Passing", "Close Dribbling"
  category          String             // "passing", "dribbling", "defending", "physical", etc.
  subcategory       String?            // "technical", "mental", "goalkeeper", etc.
  min_value         Int                @default(0)
  max_value         Int                @default(100)
  description       String?
  is_active         Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relaciones
  playerAttributes  PlayerAttribute[]

  @@index([category])
  @@index([subcategory])
  @@index([is_active])
  @@map("attribute_definitions")
}

model PlayerAttribute {
  id                  String              @id @default(cuid())
  player_id           String
  attribute_id        String
  value               Int                 // Valor del atributo (ej: 85)

  // Contexto temporal
  period              String?             // "3m", "6m", "1y", "current"
  measured_at         DateTime            @default(now())

  // Metadatos
  source              String?             // "wyscout", "fbref", "scout_manual", "fmi_system"
  confidence          Float?              // 0-100 confianza en el dato
  notes               String?

  // Campos calculados
  percentile          Float?              // Percentil vs otros jugadores
  rank                Int?                // Ranking en este atributo

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relaciones
  player              Jugador             @relation("PlayerAttributes", fields: [player_id], references: [id_player], onDelete: Cascade)
  attributeDefinition AttributeDefinition @relation(fields: [attribute_id], references: [id])

  @@unique([player_id, attribute_id, period, measured_at])
  @@index([player_id])
  @@index([attribute_id])
  @@index([period])
  @@index([measured_at])
  @@index([player_id, period])
  @@index([attribute_id, period])
  @@map("player_attributes")
}

// 🕷️ MODELO PARA RASTREAR TRABAJOS DE SCRAPING
model ScrapingJob {
  id              String   @id @default(cuid())

  // Estado del trabajo
  status          String   // "pending", "running", "paused", "completed", "failed"

  // Progreso
  totalPlayers    Int      @default(0)
  processedCount  Int      @default(0)
  successCount    Int      @default(0)
  errorCount      Int      @default(0)

  // Batch control
  currentBatch    Int      @default(0)
  batchSize       Int      @default(5)

  // Rate Limiting Metrics
  rateLimitCount  Int      @default(0)  // Cuántas veces se detectó rate limiting (429)
  retryCount      Int      @default(0)  // Total de reintentos realizados
  errorRate       Float?                 // Tasa de errores (%)
  avgDelay        Int?                   // Delay promedio entre requests (ms)

  // Adaptive Throttling
  slowModeActive  Boolean  @default(false) // Si está en modo lento
  speedMultiplier Float    @default(1.0)   // Multiplicador de velocidad actual

  // Timestamps
  startedAt       DateTime?
  completedAt     DateTime?
  lastProcessedAt DateTime?
  last429At       DateTime? // Última vez que se detectó un 429

  // Error tracking
  lastError       String?

  // Metadata
  createdBy       String?  // clerkId del admin que inició el job

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("scraping_jobs")
}

// 🚨 MODELO PARA ALERTAS DE URLs NO FUNCIONANDO
model ScrapingAlert {
  id          String   @id @default(cuid())

  // Tipo de entidad
  entityType  String   // "player" o "team"
  entityId    String   // id_player o id_equipo
  entityName  String?  // Nombre del jugador o equipo

  // URL problemática
  url         String

  // Error
  errorType   String   // "404", "500", "timeout", "invalid_url", etc.
  errorMessage String?
  httpStatus  Int?

  // Estado
  status      String   @default("pending") // "pending", "resolved", "ignored"

  // Resolución
  resolvedAt  DateTime?
  resolvedBy  String?  // clerkId del admin que lo resolvió
  resolution  String?  // "url_updated", "entity_deleted", "false_positive"
  newUrl      String?  // Nueva URL si se actualizó

  // Timestamps
  firstSeenAt DateTime @default(now())
  lastSeenAt  DateTime @default(now())
  seenCount   Int      @default(1) // Cuántas veces se ha visto este error

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([status])
  @@index([createdAt])
  @@map("scraping_alerts")
}

// 🔧 MODELO PARA CORRECCIONES DINÁMICAS DEL ADMIN
model ScrapingCorrection {
  id            String   @id @default(cuid())

  // Tipo de corrección
  correctionType String  // "country", "competition", "team_name", "nationality", "national_tier", "agency"

  // Mapeo
  originalValue  String  // Valor original que viene de Transfermarkt
  correctedValue String  // Valor corregido que se guardará en BD

  // Para correcciones que dependen de otro campo (ej: competiciones duplicadas)
  contextField   String? // Ej: "country" para competiciones
  contextValue   String? // Ej: "Germany" para Bundesliga

  // Metadata
  isActive       Boolean @default(true)
  priority       Int     @default(0) // Para ordenar correcciones en conflicto

  // Auditoría
  createdBy      String  // clerkId del admin que creó la corrección
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([correctionType, originalValue, contextField, contextValue])
  @@index([correctionType, isActive])
  @@map("scraping_corrections")
}

// 💼 MODELO PARA OFERTAS DE TRABAJO
model JobOffer {
  id               String    @id @default(cuid())

  // Información básica
  title            String
  description      String    @db.Text
  short_description String?  @db.Text // Breve descripción para listados

  // Ubicación y equipo
  team_id          String?
  team             Equipo?   @relation("TeamJobOffers", fields: [team_id], references: [id_team], onDelete: SetNull)
  location         String?   // Ciudad o ubicación específica
  remote_allowed   Boolean   @default(false)

  // Detalles del trabajo
  position_type    String    // "Scout", "Head Scout", "Analyst", "Director", etc.
  contract_type    String    // "Full-time", "Part-time", "Contract", "Freelance"
  experience_level String    // "Junior", "Mid", "Senior", "Lead"

  // Compensación
  salary_min       Float?
  salary_max       Float?
  salary_currency  String    @default("EUR")
  salary_period    String?   // "monthly", "yearly"

  // Requisitos
  requirements     String?   @db.Text
  responsibilities String?   @db.Text
  benefits         String?   @db.Text

  // Estado y visibilidad
  status           String    @default("draft") // "draft", "published", "closed"
  expires_at       DateTime?

  // Información de contacto
  contact_email    String?
  contact_phone    String?
  application_url  String?

  // Auditoría
  created_by       String    // clerkId del admin que creó la oferta
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Estadísticas
  views_count      Int       @default(0)
  applications_count Int     @default(0)

  @@index([status])
  @@index([team_id])
  @@index([position_type])
  @@index([contract_type])
  @@index([experience_level])
  @@index([expires_at])
  @@index([createdAt])
  @@index([status, expires_at])
  @@map("job_offers")
}